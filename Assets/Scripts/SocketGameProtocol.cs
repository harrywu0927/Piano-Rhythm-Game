// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SocketGameProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketGameProtocol {

  /// <summary>Holder for reflection information generated from SocketGameProtocol.proto</summary>
  public static partial class SocketGameProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SocketGameProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SocketGameProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhTb2NrZXRHYW1lUHJvdG9jb2wucHJvdG8SElNvY2tldEdhbWVQcm90b2Nv",
            "bBofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLmAwoITWFpblBh",
            "Y2sSMgoKYWN0aW9uY29kZRgBIAEoDjIeLlNvY2tldEdhbWVQcm90b2NvbC5B",
            "Y3Rpb25Db2RlEjIKCnJldHVybmNvZGUYAiABKA4yHi5Tb2NrZXRHYW1lUHJv",
            "dG9jb2wuUmV0dXJuQ29kZRIwCglsb2dpbnBhY2sYAyABKAsyHS5Tb2NrZXRH",
            "YW1lUHJvdG9jb2wuTG9naW5QYWNrEiYKBHVzZXIYBCABKAsyGC5Tb2NrZXRH",
            "YW1lUHJvdG9jb2wuVXNlchI0CgtyZXF1ZXN0Y29kZRgFIAEoDjIfLlNvY2tl",
            "dEdhbWVQcm90b2NvbC5SZXF1ZXN0Q29kZRInCgVzb25ncxgGIAMoCzIYLlNv",
            "Y2tldEdhbWVQcm90b2NvbC5Tb25nEjoKDmdhbWVyZXN1bHRwYWNrGAcgASgL",
            "MiIuU29ja2V0R2FtZVByb3RvY29sLkdhbWVSZXN1bHRQYWNrEg8KB2F1dGhv",
            "cnMYCCADKAkSOgoOc2VhcmNoc29uZ3BhY2sYCSABKAsyIi5Tb2NrZXRHYW1l",
            "UHJvdG9jb2wuU2VhcmNoU29uZ1BhY2sSMAoJdXNlcnNzb25nGAogAygLMh0u",
            "U29ja2V0R2FtZVByb3RvY29sLlVzZXJzU29uZyIvCglMb2dpblBhY2sSEAoI",
            "dXNlcm5hbWUYASABKAkSEAoIcGFzc3dvcmQYAiABKAkibQoEVXNlchIOCgZ1",
            "c2VyaWQYASABKAUSDwoHdXNybmFtZRgCIAEoCRIRCglnb2xkY29pbnMYAyAB",
            "KAUSDQoFbGV2ZWwYBCABKAUSDgoGc2NvcmVzGAUgASgFEhIKCmV4cGVyaWVu",
            "Y2UYBiABKAUihgEKBFNvbmcSDQoFcHJpY2UYASABKAUSDAoEbmFtZRgCIAEo",
            "CRISCgpkaWZmaWN1bHR5GAMgASgFEhQKDHJlcXVpcmVsZXZlbBgEIAEoBRIO",
            "CgZhdXRob3IYBSABKAkSEQoJZG93bmxvYWRzGAYgASgFEhQKDGhpZ2hlc3Rz",
            "Y29yZRgHIAEoASL5AQoOR2FtZVJlc3VsdFBhY2sSEAoIZ29sZGNvaW4YASAB",
            "KAUSEgoKZXhwZXJpZW5jZRgCIAEoBRIRCglnYW1lc2NvcmUYAyABKAESDgoG",
            "dXNlcmlkGAQgASgFEhMKC2lzbmV3cmVjb3JkGAUgASgIEg8KB3BlcmZlY3QY",
            "BiABKAUSDQoFZ3JlYXQYByABKAUSDAoEZ29vZBgIIAEoBRIMCgRtaXNzGAkg",
            "ASgFEg0KBWNvbWJvGAogASgFEgwKBHNvbmcYCyABKAkSMAoMY29tcGxldGV0",
            "aW1lGAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJoCg5TZWFy",
            "Y2hTb25nUGFjaxIOCgZhdXRob3IYASABKAkSEAoIc29uZ05hbWUYAiABKAkS",
            "EgoKZGlmZmljdWx0eRgDIAEoBRINCgVwcmljZRgEIAEoBRIRCglkb3dubG9h",
            "ZHMYBSABKAUihwEKCVVzZXJzU29uZxIQCghzb25nbmFtZRgBIAEoCRIOCgZ1",
            "c2VyaWQYAiABKAUSEwoLc2NvcmVyZWNvcmQYAyABKAESEQoJcGxheXRpbWVz",
            "GAQgASgFEhIKCmRpZmZpY3VsdHkYBSABKAUSDAoEcmFuaxgGIAEoBRIOCgZh",
            "dXRob3IYByABKAkqRgoLUmVxdWVzdENvZGUSDwoLVXNlckNvbnRyb2wQABIP",
            "CgtTb25nQ29udHJvbBABEhUKEUdhbWVSZXN1bHRDb250cm9sEAIqdQoKQWN0",
            "aW9uQ29kZRIOCgpBY3Rpb25Ob25lEAASCgoGU2lnbnVwEAESCQoFTG9naW4Q",
            "AhIMCghCdXlzb25ncxADEg0KCVN0YXJ0Z2FtZRAEEg8KC1NlYXJjaFNvbmdz",
            "EAUSEgoOR2FtZVNldHRsZW1lbnQQBip+CgpSZXR1cm5Db2RlEg4KClJldHVy",
            "bk5vbmUQABILCgdTdWNjZWVkEAESCAoERmFpbBACEg4KClVzZXJFeGlzdHMQ",
            "AxIVChFHb2xkY29pbk5vdEVub3VnaBAEEhIKDkxldmVsTm90RW5vdWdoEAUS",
            "DgoKU29uZ0V4aXN0cxAGYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SocketGameProtocol.RequestCode), typeof(global::SocketGameProtocol.ActionCode), typeof(global::SocketGameProtocol.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.MainPack), global::SocketGameProtocol.MainPack.Parser, new[]{ "Actioncode", "Returncode", "Loginpack", "User", "Requestcode", "Songs", "Gameresultpack", "Authors", "Searchsongpack", "Userssong" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.LoginPack), global::SocketGameProtocol.LoginPack.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.User), global::SocketGameProtocol.User.Parser, new[]{ "Userid", "Usrname", "Goldcoins", "Level", "Scores", "Experience" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.Song), global::SocketGameProtocol.Song.Parser, new[]{ "Price", "Name", "Difficulty", "Requirelevel", "Author", "Downloads", "Highestscore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.GameResultPack), global::SocketGameProtocol.GameResultPack.Parser, new[]{ "Goldcoin", "Experience", "Gamescore", "Userid", "Isnewrecord", "Perfect", "Great", "Good", "Miss", "Combo", "Song", "Completetime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.SearchSongPack), global::SocketGameProtocol.SearchSongPack.Parser, new[]{ "Author", "SongName", "Difficulty", "Price", "Downloads" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.UsersSong), global::SocketGameProtocol.UsersSong.Parser, new[]{ "Songname", "Userid", "Scorerecord", "Playtimes", "Difficulty", "Rank", "Author" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("UserControl")] UserControl = 0,
    [pbr::OriginalName("SongControl")] SongControl = 1,
    [pbr::OriginalName("GameResultControl")] GameResultControl = 2,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///注册
    /// </summary>
    [pbr::OriginalName("Signup")] Signup = 1,
    /// <summary>
    ///登录
    /// </summary>
    [pbr::OriginalName("Login")] Login = 2,
    /// <summary>
    ///购买歌曲
    /// </summary>
    [pbr::OriginalName("Buysongs")] Buysongs = 3,
    /// <summary>
    ///开始游戏
    /// </summary>
    [pbr::OriginalName("Startgame")] Startgame = 4,
    /// <summary>
    ///搜索歌曲
    /// </summary>
    [pbr::OriginalName("SearchSongs")] SearchSongs = 5,
    /// <summary>
    ///游戏结算
    /// </summary>
    [pbr::OriginalName("GameSettlement")] GameSettlement = 6,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    ///失败
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///注册时用户已存在
    /// </summary>
    [pbr::OriginalName("UserExists")] UserExists = 3,
    /// <summary>
    ///金币不够
    /// </summary>
    [pbr::OriginalName("GoldcoinNotEnough")] GoldcoinNotEnough = 4,
    /// <summary>
    ///等级不够
    /// </summary>
    [pbr::OriginalName("LevelNotEnough")] LevelNotEnough = 5,
    /// <summary>
    ///歌曲已存在
    /// </summary>
    [pbr::OriginalName("SongExists")] SongExists = 6,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      actioncode_ = other.actioncode_;
      returncode_ = other.returncode_;
      loginpack_ = other.loginpack_ != null ? other.loginpack_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      requestcode_ = other.requestcode_;
      songs_ = other.songs_.Clone();
      gameresultpack_ = other.gameresultpack_ != null ? other.gameresultpack_.Clone() : null;
      authors_ = other.authors_.Clone();
      searchsongpack_ = other.searchsongpack_ != null ? other.searchsongpack_.Clone() : null;
      userssong_ = other.userssong_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "actioncode" field.</summary>
    public const int ActioncodeFieldNumber = 1;
    private global::SocketGameProtocol.ActionCode actioncode_ = global::SocketGameProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.ActionCode Actioncode {
      get { return actioncode_; }
      set {
        actioncode_ = value;
      }
    }

    /// <summary>Field number for the "returncode" field.</summary>
    public const int ReturncodeFieldNumber = 2;
    private global::SocketGameProtocol.ReturnCode returncode_ = global::SocketGameProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.ReturnCode Returncode {
      get { return returncode_; }
      set {
        returncode_ = value;
      }
    }

    /// <summary>Field number for the "loginpack" field.</summary>
    public const int LoginpackFieldNumber = 3;
    private global::SocketGameProtocol.LoginPack loginpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.LoginPack Loginpack {
      get { return loginpack_; }
      set {
        loginpack_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private global::SocketGameProtocol.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "requestcode" field.</summary>
    public const int RequestcodeFieldNumber = 5;
    private global::SocketGameProtocol.RequestCode requestcode_ = global::SocketGameProtocol.RequestCode.UserControl;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.RequestCode Requestcode {
      get { return requestcode_; }
      set {
        requestcode_ = value;
      }
    }

    /// <summary>Field number for the "songs" field.</summary>
    public const int SongsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SocketGameProtocol.Song> _repeated_songs_codec
        = pb::FieldCodec.ForMessage(50, global::SocketGameProtocol.Song.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol.Song> songs_ = new pbc::RepeatedField<global::SocketGameProtocol.Song>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol.Song> Songs {
      get { return songs_; }
    }

    /// <summary>Field number for the "gameresultpack" field.</summary>
    public const int GameresultpackFieldNumber = 7;
    private global::SocketGameProtocol.GameResultPack gameresultpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.GameResultPack Gameresultpack {
      get { return gameresultpack_; }
      set {
        gameresultpack_ = value;
      }
    }

    /// <summary>Field number for the "authors" field.</summary>
    public const int AuthorsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_authors_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> authors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Authors {
      get { return authors_; }
    }

    /// <summary>Field number for the "searchsongpack" field.</summary>
    public const int SearchsongpackFieldNumber = 9;
    private global::SocketGameProtocol.SearchSongPack searchsongpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.SearchSongPack Searchsongpack {
      get { return searchsongpack_; }
      set {
        searchsongpack_ = value;
      }
    }

    /// <summary>Field number for the "userssong" field.</summary>
    public const int UserssongFieldNumber = 10;
    private static readonly pb::FieldCodec<global::SocketGameProtocol.UsersSong> _repeated_userssong_codec
        = pb::FieldCodec.ForMessage(82, global::SocketGameProtocol.UsersSong.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol.UsersSong> userssong_ = new pbc::RepeatedField<global::SocketGameProtocol.UsersSong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol.UsersSong> Userssong {
      get { return userssong_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Actioncode != other.Actioncode) return false;
      if (Returncode != other.Returncode) return false;
      if (!object.Equals(Loginpack, other.Loginpack)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Requestcode != other.Requestcode) return false;
      if(!songs_.Equals(other.songs_)) return false;
      if (!object.Equals(Gameresultpack, other.Gameresultpack)) return false;
      if(!authors_.Equals(other.authors_)) return false;
      if (!object.Equals(Searchsongpack, other.Searchsongpack)) return false;
      if(!userssong_.Equals(other.userssong_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Actioncode != global::SocketGameProtocol.ActionCode.ActionNone) hash ^= Actioncode.GetHashCode();
      if (Returncode != global::SocketGameProtocol.ReturnCode.ReturnNone) hash ^= Returncode.GetHashCode();
      if (loginpack_ != null) hash ^= Loginpack.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Requestcode != global::SocketGameProtocol.RequestCode.UserControl) hash ^= Requestcode.GetHashCode();
      hash ^= songs_.GetHashCode();
      if (gameresultpack_ != null) hash ^= Gameresultpack.GetHashCode();
      hash ^= authors_.GetHashCode();
      if (searchsongpack_ != null) hash ^= Searchsongpack.GetHashCode();
      hash ^= userssong_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actioncode != global::SocketGameProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Actioncode);
      }
      if (Returncode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Returncode);
      }
      if (loginpack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Loginpack);
      }
      if (user_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(User);
      }
      if (Requestcode != global::SocketGameProtocol.RequestCode.UserControl) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Requestcode);
      }
      songs_.WriteTo(output, _repeated_songs_codec);
      if (gameresultpack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Gameresultpack);
      }
      authors_.WriteTo(output, _repeated_authors_codec);
      if (searchsongpack_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Searchsongpack);
      }
      userssong_.WriteTo(output, _repeated_userssong_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actioncode != global::SocketGameProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actioncode);
      }
      if (Returncode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Returncode);
      }
      if (loginpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loginpack);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Requestcode != global::SocketGameProtocol.RequestCode.UserControl) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Requestcode);
      }
      size += songs_.CalculateSize(_repeated_songs_codec);
      if (gameresultpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gameresultpack);
      }
      size += authors_.CalculateSize(_repeated_authors_codec);
      if (searchsongpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Searchsongpack);
      }
      size += userssong_.CalculateSize(_repeated_userssong_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.Actioncode != global::SocketGameProtocol.ActionCode.ActionNone) {
        Actioncode = other.Actioncode;
      }
      if (other.Returncode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        Returncode = other.Returncode;
      }
      if (other.loginpack_ != null) {
        if (loginpack_ == null) {
          Loginpack = new global::SocketGameProtocol.LoginPack();
        }
        Loginpack.MergeFrom(other.Loginpack);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::SocketGameProtocol.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Requestcode != global::SocketGameProtocol.RequestCode.UserControl) {
        Requestcode = other.Requestcode;
      }
      songs_.Add(other.songs_);
      if (other.gameresultpack_ != null) {
        if (gameresultpack_ == null) {
          Gameresultpack = new global::SocketGameProtocol.GameResultPack();
        }
        Gameresultpack.MergeFrom(other.Gameresultpack);
      }
      authors_.Add(other.authors_);
      if (other.searchsongpack_ != null) {
        if (searchsongpack_ == null) {
          Searchsongpack = new global::SocketGameProtocol.SearchSongPack();
        }
        Searchsongpack.MergeFrom(other.Searchsongpack);
      }
      userssong_.Add(other.userssong_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Actioncode = (global::SocketGameProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 16: {
            Returncode = (global::SocketGameProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (loginpack_ == null) {
              Loginpack = new global::SocketGameProtocol.LoginPack();
            }
            input.ReadMessage(Loginpack);
            break;
          }
          case 34: {
            if (user_ == null) {
              User = new global::SocketGameProtocol.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 40: {
            Requestcode = (global::SocketGameProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 50: {
            songs_.AddEntriesFrom(input, _repeated_songs_codec);
            break;
          }
          case 58: {
            if (gameresultpack_ == null) {
              Gameresultpack = new global::SocketGameProtocol.GameResultPack();
            }
            input.ReadMessage(Gameresultpack);
            break;
          }
          case 66: {
            authors_.AddEntriesFrom(input, _repeated_authors_codec);
            break;
          }
          case 74: {
            if (searchsongpack_ == null) {
              Searchsongpack = new global::SocketGameProtocol.SearchSongPack();
            }
            input.ReadMessage(Searchsongpack);
            break;
          }
          case 82: {
            userssong_.AddEntriesFrom(input, _repeated_userssong_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      userid_ = other.userid_;
      usrname_ = other.usrname_;
      goldcoins_ = other.goldcoins_;
      level_ = other.level_;
      scores_ = other.scores_;
      experience_ = other.experience_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private int userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "usrname" field.</summary>
    public const int UsrnameFieldNumber = 2;
    private string usrname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usrname {
      get { return usrname_; }
      set {
        usrname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "goldcoins" field.</summary>
    public const int GoldcoinsFieldNumber = 3;
    private int goldcoins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goldcoins {
      get { return goldcoins_; }
      set {
        goldcoins_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "scores" field.</summary>
    public const int ScoresFieldNumber = 5;
    private int scores_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Scores {
      get { return scores_; }
      set {
        scores_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 6;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      if (Usrname != other.Usrname) return false;
      if (Goldcoins != other.Goldcoins) return false;
      if (Level != other.Level) return false;
      if (Scores != other.Scores) return false;
      if (Experience != other.Experience) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid != 0) hash ^= Userid.GetHashCode();
      if (Usrname.Length != 0) hash ^= Usrname.GetHashCode();
      if (Goldcoins != 0) hash ^= Goldcoins.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Scores != 0) hash ^= Scores.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Userid);
      }
      if (Usrname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Usrname);
      }
      if (Goldcoins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Goldcoins);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Scores != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Scores);
      }
      if (Experience != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Experience);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (Usrname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usrname);
      }
      if (Goldcoins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goldcoins);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Scores != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scores);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Userid != 0) {
        Userid = other.Userid;
      }
      if (other.Usrname.Length != 0) {
        Usrname = other.Usrname;
      }
      if (other.Goldcoins != 0) {
        Goldcoins = other.Goldcoins;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Scores != 0) {
        Scores = other.Scores;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Userid = input.ReadInt32();
            break;
          }
          case 18: {
            Usrname = input.ReadString();
            break;
          }
          case 24: {
            Goldcoins = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Scores = input.ReadInt32();
            break;
          }
          case 48: {
            Experience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Song : pb::IMessage<Song> {
    private static readonly pb::MessageParser<Song> _parser = new pb::MessageParser<Song>(() => new Song());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Song> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song(Song other) : this() {
      price_ = other.price_;
      name_ = other.name_;
      difficulty_ = other.difficulty_;
      requirelevel_ = other.requirelevel_;
      author_ = other.author_;
      downloads_ = other.downloads_;
      highestscore_ = other.highestscore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song Clone() {
      return new Song(this);
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 1;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///歌名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 3;
    private int difficulty_;
    /// <summary>
    ///难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "requirelevel" field.</summary>
    public const int RequirelevelFieldNumber = 4;
    private int requirelevel_;
    /// <summary>
    ///解锁需要的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Requirelevel {
      get { return requirelevel_; }
      set {
        requirelevel_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 5;
    private string author_ = "";
    /// <summary>
    ///作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downloads" field.</summary>
    public const int DownloadsFieldNumber = 6;
    private int downloads_;
    /// <summary>
    ///下载量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Downloads {
      get { return downloads_; }
      set {
        downloads_ = value;
      }
    }

    /// <summary>Field number for the "highestscore" field.</summary>
    public const int HighestscoreFieldNumber = 7;
    private double highestscore_;
    /// <summary>
    ///最高分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Highestscore {
      get { return highestscore_; }
      set {
        highestscore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Song);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Song other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Price != other.Price) return false;
      if (Name != other.Name) return false;
      if (Difficulty != other.Difficulty) return false;
      if (Requirelevel != other.Requirelevel) return false;
      if (Author != other.Author) return false;
      if (Downloads != other.Downloads) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Highestscore, other.Highestscore)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (Requirelevel != 0) hash ^= Requirelevel.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Downloads != 0) hash ^= Downloads.GetHashCode();
      if (Highestscore != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Highestscore);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Price);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Difficulty);
      }
      if (Requirelevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Requirelevel);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Author);
      }
      if (Downloads != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Downloads);
      }
      if (Highestscore != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Highestscore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (Requirelevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Requirelevel);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Downloads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Downloads);
      }
      if (Highestscore != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Song other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.Requirelevel != 0) {
        Requirelevel = other.Requirelevel;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Downloads != 0) {
        Downloads = other.Downloads;
      }
      if (other.Highestscore != 0D) {
        Highestscore = other.Highestscore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Price = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Difficulty = input.ReadInt32();
            break;
          }
          case 32: {
            Requirelevel = input.ReadInt32();
            break;
          }
          case 42: {
            Author = input.ReadString();
            break;
          }
          case 48: {
            Downloads = input.ReadInt32();
            break;
          }
          case 57: {
            Highestscore = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameResultPack : pb::IMessage<GameResultPack> {
    private static readonly pb::MessageParser<GameResultPack> _parser = new pb::MessageParser<GameResultPack>(() => new GameResultPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResultPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultPack(GameResultPack other) : this() {
      goldcoin_ = other.goldcoin_;
      experience_ = other.experience_;
      gamescore_ = other.gamescore_;
      userid_ = other.userid_;
      isnewrecord_ = other.isnewrecord_;
      perfect_ = other.perfect_;
      great_ = other.great_;
      good_ = other.good_;
      miss_ = other.miss_;
      combo_ = other.combo_;
      song_ = other.song_;
      completetime_ = other.completetime_ != null ? other.completetime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultPack Clone() {
      return new GameResultPack(this);
    }

    /// <summary>Field number for the "goldcoin" field.</summary>
    public const int GoldcoinFieldNumber = 1;
    private int goldcoin_;
    /// <summary>
    ///金币奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goldcoin {
      get { return goldcoin_; }
      set {
        goldcoin_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 2;
    private int experience_;
    /// <summary>
    ///经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "gamescore" field.</summary>
    public const int GamescoreFieldNumber = 3;
    private double gamescore_;
    /// <summary>
    ///游戏分值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamescore {
      get { return gamescore_; }
      set {
        gamescore_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 4;
    private int userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "isnewrecord" field.</summary>
    public const int IsnewrecordFieldNumber = 5;
    private bool isnewrecord_;
    /// <summary>
    ///是否为新纪录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isnewrecord {
      get { return isnewrecord_; }
      set {
        isnewrecord_ = value;
      }
    }

    /// <summary>Field number for the "perfect" field.</summary>
    public const int PerfectFieldNumber = 6;
    private int perfect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Perfect {
      get { return perfect_; }
      set {
        perfect_ = value;
      }
    }

    /// <summary>Field number for the "great" field.</summary>
    public const int GreatFieldNumber = 7;
    private int great_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Great {
      get { return great_; }
      set {
        great_ = value;
      }
    }

    /// <summary>Field number for the "good" field.</summary>
    public const int GoodFieldNumber = 8;
    private int good_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Good {
      get { return good_; }
      set {
        good_ = value;
      }
    }

    /// <summary>Field number for the "miss" field.</summary>
    public const int MissFieldNumber = 9;
    private int miss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Miss {
      get { return miss_; }
      set {
        miss_ = value;
      }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 10;
    private int combo_;
    /// <summary>
    ///最大连击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Combo {
      get { return combo_; }
      set {
        combo_ = value;
      }
    }

    /// <summary>Field number for the "song" field.</summary>
    public const int SongFieldNumber = 11;
    private string song_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Song {
      get { return song_; }
      set {
        song_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completetime" field.</summary>
    public const int CompletetimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp completetime_;
    /// <summary>
    ///完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Completetime {
      get { return completetime_; }
      set {
        completetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResultPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResultPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Goldcoin != other.Goldcoin) return false;
      if (Experience != other.Experience) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamescore, other.Gamescore)) return false;
      if (Userid != other.Userid) return false;
      if (Isnewrecord != other.Isnewrecord) return false;
      if (Perfect != other.Perfect) return false;
      if (Great != other.Great) return false;
      if (Good != other.Good) return false;
      if (Miss != other.Miss) return false;
      if (Combo != other.Combo) return false;
      if (Song != other.Song) return false;
      if (!object.Equals(Completetime, other.Completetime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Goldcoin != 0) hash ^= Goldcoin.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (Gamescore != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamescore);
      if (Userid != 0) hash ^= Userid.GetHashCode();
      if (Isnewrecord != false) hash ^= Isnewrecord.GetHashCode();
      if (Perfect != 0) hash ^= Perfect.GetHashCode();
      if (Great != 0) hash ^= Great.GetHashCode();
      if (Good != 0) hash ^= Good.GetHashCode();
      if (Miss != 0) hash ^= Miss.GetHashCode();
      if (Combo != 0) hash ^= Combo.GetHashCode();
      if (Song.Length != 0) hash ^= Song.GetHashCode();
      if (completetime_ != null) hash ^= Completetime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Goldcoin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Goldcoin);
      }
      if (Experience != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Experience);
      }
      if (Gamescore != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Gamescore);
      }
      if (Userid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Userid);
      }
      if (Isnewrecord != false) {
        output.WriteRawTag(40);
        output.WriteBool(Isnewrecord);
      }
      if (Perfect != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Perfect);
      }
      if (Great != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Great);
      }
      if (Good != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Good);
      }
      if (Miss != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Miss);
      }
      if (Combo != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Combo);
      }
      if (Song.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Song);
      }
      if (completetime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Completetime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Goldcoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goldcoin);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (Gamescore != 0D) {
        size += 1 + 8;
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (Isnewrecord != false) {
        size += 1 + 1;
      }
      if (Perfect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Perfect);
      }
      if (Great != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Great);
      }
      if (Good != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Good);
      }
      if (Miss != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Miss);
      }
      if (Combo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Combo);
      }
      if (Song.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Song);
      }
      if (completetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Completetime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResultPack other) {
      if (other == null) {
        return;
      }
      if (other.Goldcoin != 0) {
        Goldcoin = other.Goldcoin;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.Gamescore != 0D) {
        Gamescore = other.Gamescore;
      }
      if (other.Userid != 0) {
        Userid = other.Userid;
      }
      if (other.Isnewrecord != false) {
        Isnewrecord = other.Isnewrecord;
      }
      if (other.Perfect != 0) {
        Perfect = other.Perfect;
      }
      if (other.Great != 0) {
        Great = other.Great;
      }
      if (other.Good != 0) {
        Good = other.Good;
      }
      if (other.Miss != 0) {
        Miss = other.Miss;
      }
      if (other.Combo != 0) {
        Combo = other.Combo;
      }
      if (other.Song.Length != 0) {
        Song = other.Song;
      }
      if (other.completetime_ != null) {
        if (completetime_ == null) {
          Completetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Completetime.MergeFrom(other.Completetime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Goldcoin = input.ReadInt32();
            break;
          }
          case 16: {
            Experience = input.ReadInt32();
            break;
          }
          case 25: {
            Gamescore = input.ReadDouble();
            break;
          }
          case 32: {
            Userid = input.ReadInt32();
            break;
          }
          case 40: {
            Isnewrecord = input.ReadBool();
            break;
          }
          case 48: {
            Perfect = input.ReadInt32();
            break;
          }
          case 56: {
            Great = input.ReadInt32();
            break;
          }
          case 64: {
            Good = input.ReadInt32();
            break;
          }
          case 72: {
            Miss = input.ReadInt32();
            break;
          }
          case 80: {
            Combo = input.ReadInt32();
            break;
          }
          case 90: {
            Song = input.ReadString();
            break;
          }
          case 98: {
            if (completetime_ == null) {
              Completetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Completetime);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchSongPack : pb::IMessage<SearchSongPack> {
    private static readonly pb::MessageParser<SearchSongPack> _parser = new pb::MessageParser<SearchSongPack>(() => new SearchSongPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchSongPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchSongPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchSongPack(SearchSongPack other) : this() {
      author_ = other.author_;
      songName_ = other.songName_;
      difficulty_ = other.difficulty_;
      price_ = other.price_;
      downloads_ = other.downloads_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchSongPack Clone() {
      return new SearchSongPack(this);
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 1;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songName" field.</summary>
    public const int SongNameFieldNumber = 2;
    private string songName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SongName {
      get { return songName_; }
      set {
        songName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 3;
    private int difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "downloads" field.</summary>
    public const int DownloadsFieldNumber = 5;
    private int downloads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Downloads {
      get { return downloads_; }
      set {
        downloads_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchSongPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchSongPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Author != other.Author) return false;
      if (SongName != other.SongName) return false;
      if (Difficulty != other.Difficulty) return false;
      if (Price != other.Price) return false;
      if (Downloads != other.Downloads) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (SongName.Length != 0) hash ^= SongName.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Downloads != 0) hash ^= Downloads.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Author.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Author);
      }
      if (SongName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SongName);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Difficulty);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (Downloads != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Downloads);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (SongName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SongName);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Downloads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Downloads);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchSongPack other) {
      if (other == null) {
        return;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.SongName.Length != 0) {
        SongName = other.SongName;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Downloads != 0) {
        Downloads = other.Downloads;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Author = input.ReadString();
            break;
          }
          case 18: {
            SongName = input.ReadString();
            break;
          }
          case 24: {
            Difficulty = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            Downloads = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UsersSong : pb::IMessage<UsersSong> {
    private static readonly pb::MessageParser<UsersSong> _parser = new pb::MessageParser<UsersSong>(() => new UsersSong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsersSong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsersSong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsersSong(UsersSong other) : this() {
      songname_ = other.songname_;
      userid_ = other.userid_;
      scorerecord_ = other.scorerecord_;
      playtimes_ = other.playtimes_;
      difficulty_ = other.difficulty_;
      rank_ = other.rank_;
      author_ = other.author_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsersSong Clone() {
      return new UsersSong(this);
    }

    /// <summary>Field number for the "songname" field.</summary>
    public const int SongnameFieldNumber = 1;
    private string songname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Songname {
      get { return songname_; }
      set {
        songname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "scorerecord" field.</summary>
    public const int ScorerecordFieldNumber = 3;
    private double scorerecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Scorerecord {
      get { return scorerecord_; }
      set {
        scorerecord_ = value;
      }
    }

    /// <summary>Field number for the "playtimes" field.</summary>
    public const int PlaytimesFieldNumber = 4;
    private int playtimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playtimes {
      get { return playtimes_; }
      set {
        playtimes_ = value;
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 5;
    private int difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 7;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsersSong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsersSong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Songname != other.Songname) return false;
      if (Userid != other.Userid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Scorerecord, other.Scorerecord)) return false;
      if (Playtimes != other.Playtimes) return false;
      if (Difficulty != other.Difficulty) return false;
      if (Rank != other.Rank) return false;
      if (Author != other.Author) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Songname.Length != 0) hash ^= Songname.GetHashCode();
      if (Userid != 0) hash ^= Userid.GetHashCode();
      if (Scorerecord != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Scorerecord);
      if (Playtimes != 0) hash ^= Playtimes.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Songname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Songname);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
      if (Scorerecord != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Scorerecord);
      }
      if (Playtimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Playtimes);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Difficulty);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Author);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Songname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Songname);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (Scorerecord != 0D) {
        size += 1 + 8;
      }
      if (Playtimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playtimes);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsersSong other) {
      if (other == null) {
        return;
      }
      if (other.Songname.Length != 0) {
        Songname = other.Songname;
      }
      if (other.Userid != 0) {
        Userid = other.Userid;
      }
      if (other.Scorerecord != 0D) {
        Scorerecord = other.Scorerecord;
      }
      if (other.Playtimes != 0) {
        Playtimes = other.Playtimes;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Songname = input.ReadString();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
          case 25: {
            Scorerecord = input.ReadDouble();
            break;
          }
          case 32: {
            Playtimes = input.ReadInt32();
            break;
          }
          case 40: {
            Difficulty = input.ReadInt32();
            break;
          }
          case 48: {
            Rank = input.ReadInt32();
            break;
          }
          case 58: {
            Author = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
